<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 折枝</title>
    <link>https://kongeryi.github.io/posts/</link>
    <description>Recent content in Posts on 折枝</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://kongeryi.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hello World</title>
      <link>https://kongeryi.github.io/posts/hello-world/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kongeryi.github.io/posts/hello-world/</guid>
      <description>The hugo new theme command will scaffold the beginnings of a new theme for you to get you on your way.
If you’re creating a theme with plans to share it on the Hugo Themes website please note the following: - If using inline styles you will need to use absolute URLs, for the linked assets to be served properly, e.g. &amp;lt;div style=&amp;quot;background: url(&#39;{{ &amp;quot;images/background.jpg&amp;quot; | absURL }}&#39;)&amp;quot;&amp;gt; - Make sure not to use a forward slash / in the beginning of a URL, because it will point to the host root.</description>
    </item>
    
    <item>
      <title>山鬼情书之零</title>
      <link>https://kongeryi.github.io/posts/%E5%B1%B1%E9%AC%BC%E6%83%85%E4%B9%A6%E4%B9%8B%E9%9B%B6/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kongeryi.github.io/posts/%E5%B1%B1%E9%AC%BC%E6%83%85%E4%B9%A6%E4%B9%8B%E9%9B%B6/</guid>
      <description>匹夫说我生来骄傲，
I’m proud of my husband.
不肯半分折腰，
Unwilling to half split up.
亦不能半分低头。
You can not half bow.
我将送喜欢的人远走,
I will go away the people I like.
此后情书写给山鬼,
After that, the love letter was written to the Mountain Ghost.
心事寄于西风，
My mind is in the west wind.</description>
    </item>
    
    <item>
      <title>前端优化法则</title>
      <link>https://kongeryi.github.io/posts/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%B3%95%E5%88%99/</link>
      <pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kongeryi.github.io/posts/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%B3%95%E5%88%99/</guid>
      <description>前两天被人问到前端的优化有哪些，我支支吾吾也只能说出两三条，表示很惭愧。
说到前端优化的必修课，那就是 Yahoo的前端优化性能规则 ，里面都是别人的经验总结，有 35 条之多，这是先分类在文章最后，之后会个别阐述我针对最初的 14 条，借鉴别人的翻译成果和我自己的解读
35条分类  标注 ＊ 号的是最初的14条
  内容  减少HTTP请求 * 减少DNS查询 * 避免重定向 * Ajax缓存化 * 后载入组件 预先载入组件 减少DOM元素数量 跨域分离组件 最少化iframe 避免404错误  服务端  使用CDN（内容分布网络）* 增加过期时间或者可控制缓存的请求头 * 使用Gzip组件 * 配置ETags（实体标签）* 提前刷新缓冲区 Ajax请求使用Get方法 避免空的图片src  Cookie  减少Cookie大小 为组件使用无Cookie域  CSS  将样式放在顶部 * 避免使用CSS表达式 * 选择link而不要@import 避免过滤器  JavaScript  将JS放在底部 * 使用外部的JS和CSS * 压缩JS和CSS * 去掉重复的脚本 * 最小化Dom读取 开发灵活的事件处理器  图片  优化图片 优化CSS Sprites（CSS精灵） 在HTML中不要缩放图片 制作小的和可缓存的favicon.</description>
    </item>
    
    <item>
      <title>起风了</title>
      <link>https://kongeryi.github.io/posts/%E8%B5%B7%E9%A3%8E%E4%BA%86/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kongeryi.github.io/posts/%E8%B5%B7%E9%A3%8E%E4%BA%86/</guid>
      <description>起风了 (原曲： 高桥优 -《ヤキモチ》) - 买辣椒也用券 词：米果
曲：高桥优
这一路上走走停停
顺着少年漂流的痕迹
迈出车站的前一刻
竟有些犹豫
不禁笑这近乡情怯
仍无可避免
而长野的天
依旧那么暖
风吹起了从前
从前初识这世间
万般流连
看着天边似在眼前
也甘愿赴汤蹈火去走它一遍
如今走过这世间
万般流连
翻过岁月不同侧脸
措不及防闯入你的笑颜
我曾难自拔于世界之大
也沉溺于其中梦话
不得真假 不做挣扎 不惧笑话
我曾将青春翻涌成她
也曾指尖弹出盛夏
心之所动 且就随缘去吧
逆着光行走 任风吹雨打
短短的路走走停停
也有了几分的距离
不知抚摸的是故事 还是段心情
也许期待的不过是 与时间为敌
再次看到你
微凉晨光里
笑的很甜蜜
从前初识这世间
万般流连
看着天边似在眼前
也甘愿赴汤蹈火去走它一遍
如今走过这世间
万般流连
翻过岁月不同侧脸
措不及防闯入你的笑颜
我曾难自拔于世界之大
也沉溺于其中梦话
不得真假 不做挣扎 不惧笑话
我曾将青春翻涌成她
也曾指尖弹出盛夏
心之所动 且就随缘去吧
晚风吹起你鬓间的白发
抚平回忆留下的疤
你的眼中 明暗交杂 一笑生花
暮色遮住你蹒跚的步伐
走进床头藏起的画</description>
    </item>
    
    <item>
      <title>Github入门术语</title>
      <link>https://kongeryi.github.io/posts/github%E5%85%A5%E9%97%A8%E6%9C%AF%E8%AF%AD/</link>
      <pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kongeryi.github.io/posts/github%E5%85%A5%E9%97%A8%E6%9C%AF%E8%AF%AD/</guid>
      <description>什么是Git Git是一个版本控制系统（Version Control System），版本控制即记录一个或若干文件内容变化的情况。Git属于分布式版本控制系统，客户端提取文件时总是镜像的完整仓库。
Repository 仓库，储存项目的空间。建立项目之前需要建立仓库，一个项目对应一个仓库 Issues 针对于项目bug，审查者提出的问题。or审查者希望项目增加新的特性，而提出的建议。
Star 点赞，遇到一个较好项目时可以为其”点赞“，Star过的项目会保存到点赞者的”star“库中。
Fork 拉分支，若对一个项目感兴趣，并且希望基于该项目开发新功能时，开发者可以Fork此项目。Fork之后就复制一个完全相同的项目到开发者的github仓库中，此项目独立于原项目，有着独立的时间线。
Pull Request 提交请求，建立在Fork之上。Fork一个项目并进行完善之后，可以对原项目的拥有者提出Pull Request。
Merge 合并，别人Fork你的项目，对其进行完善之后，若其提出Pull Request，此时你可以审查该请求。如果Pull Request内容满足你的要求，且未与原项目冲突，你可以选择将其合并到项目之中。
Watch 观察，若希望及时得到一个项目的更新通知，你可以Watch该项目
Gist 分享片段化的代码。翻不出去，网络奇差</description>
    </item>
    
  </channel>
</rss>